{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ChalkBot Note This is an admonition Description of the project ChalkBot.","title":"ChalkBot"},{"location":"#chalkbot","text":"Note This is an admonition Description of the project ChalkBot.","title":"ChalkBot"},{"location":"PS2%20Controls%20-%20Hardware/","text":"PS2 controls through Arduino - Hardware Side Below is a detailed documentation of the hardware components used to enable PS2 controls of the ChalkBot. This information is subject to change, for example, Arduino Mega will eventually replaced by the lighter Arduino Nano, etc. The controller This project uses Blue Lake Performance Wireless PS2 Controller. The receiver component can connect to the target device through USB or classic PS2 pins. Controller connection to Arduino Mega Jumper wires have been used to connect the pins on PS2 receiver to the Arduino Mega: The receiver is fully powered through Arduino Mega through the corresponding pin, but this will not be possible in the later stages of the project, since Arduino Nano is unable to power up the receiver. Below is a visual breakdown of the receiver pins for the PS2 controller: Arduino Mega connection to PC Arduino Mega is connected to the PC through the USB port, which serves to power it up, as well as enable the serial input received by the Arduino to be read on the PC.","title":"PS2 controls through Arduino - Hardware Side"},{"location":"PS2%20Controls%20-%20Hardware/#ps2-controls-through-arduino-hardware-side","text":"Below is a detailed documentation of the hardware components used to enable PS2 controls of the ChalkBot. This information is subject to change, for example, Arduino Mega will eventually replaced by the lighter Arduino Nano, etc.","title":"PS2 controls through Arduino - Hardware Side"},{"location":"PS2%20Controls%20-%20Hardware/#the-controller","text":"This project uses Blue Lake Performance Wireless PS2 Controller. The receiver component can connect to the target device through USB or classic PS2 pins.","title":"The controller"},{"location":"PS2%20Controls%20-%20Hardware/#controller-connection-to-arduino-mega","text":"Jumper wires have been used to connect the pins on PS2 receiver to the Arduino Mega: The receiver is fully powered through Arduino Mega through the corresponding pin, but this will not be possible in the later stages of the project, since Arduino Nano is unable to power up the receiver. Below is a visual breakdown of the receiver pins for the PS2 controller:","title":"Controller connection to Arduino Mega"},{"location":"PS2%20Controls%20-%20Hardware/#arduino-mega-connection-to-pc","text":"Arduino Mega is connected to the PC through the USB port, which serves to power it up, as well as enable the serial input received by the Arduino to be read on the PC.","title":"Arduino Mega connection to PC"},{"location":"PS2%20Controls%20-%20Software/","text":"PS2 controls through Arduino - Software Side Below is the documentation of the software side of things. This will get updated as the project moves forward. The Arduino Sketch The Arduino sketch allows the Arduino to read the inputs that the PS2 Controller receives. The sketch uses the Arduino PS2 Library - PS2X_lib. The inputs of the PS2 Controller received serially by the Arduino, can be observed from the Serial Monitor of Arduino IDE, since our sketch instructs Arduino to print lines according to the inputs. The Python Program The python portion of the PS2 Controls is currently a part of the already previously existing python program - chalkbot_cmd . The commandline keyword to call it up is aptly named - ps2controls . The serial library is imported, since it allows us to receive serial input. The serial instance - serialInst stores the serial data. This data is later read line by line as a part of the while loop. D-pad buttons up and down are responsible for forward and backward acceleration respectively. D-pad buttons left and right are responsible for left and right rotation of the Chalkbot. Currently, the program uses the drive() function of the robot to perform these actions. Actions initiated by pressing the D-pad buttons are done at the PWM determined by the pwm variable which is 50 initially. This value can be increased and decreased with the use of R2 and L2 buttons respectively.","title":"PS2 Controls   Software"},{"location":"PS2%20Controls%20-%20Software/#ps2-controls-through-arduino-software-side","text":"Below is the documentation of the software side of things. This will get updated as the project moves forward.","title":"PS2 controls through Arduino - Software Side"},{"location":"PS2%20Controls%20-%20Software/#the-arduino-sketch","text":"The Arduino sketch allows the Arduino to read the inputs that the PS2 Controller receives. The sketch uses the Arduino PS2 Library - PS2X_lib. The inputs of the PS2 Controller received serially by the Arduino, can be observed from the Serial Monitor of Arduino IDE, since our sketch instructs Arduino to print lines according to the inputs.","title":"The Arduino Sketch"},{"location":"PS2%20Controls%20-%20Software/#the-python-program","text":"The python portion of the PS2 Controls is currently a part of the already previously existing python program - chalkbot_cmd . The commandline keyword to call it up is aptly named - ps2controls . The serial library is imported, since it allows us to receive serial input. The serial instance - serialInst stores the serial data. This data is later read line by line as a part of the while loop. D-pad buttons up and down are responsible for forward and backward acceleration respectively. D-pad buttons left and right are responsible for left and right rotation of the Chalkbot. Currently, the program uses the drive() function of the robot to perform these actions. Actions initiated by pressing the D-pad buttons are done at the PWM determined by the pwm variable which is 50 initially. This value can be increased and decreased with the use of R2 and L2 buttons respectively.","title":"The Python Program"},{"location":"Raspberry%20Pi%20configuration/","text":"Configuration Raspberry Pi SSH Connection Configuration using command line: To open the configuration tool on a Raspberry Pi, enter the following command line in the command prompt: $ sudo raspi config Scroll up and down using tab-key and arrows, navigate SSH then YES , then OK then click Finish . Configuration using desktop: Go to menu Preferences , choosing Raspberry Pi configuration . Then the corresponding GUI opens with setting options, you should select SSH via interface options and release the corresponding option. Images were taken from www.raspberrypi.org Configuration using systemctl: $ sudo systemctl enable ssh $ sudo systemctl start ssh IP-address of Rapsberry Pi You'll need to write down your Raspberry Pi's IP address to connect to it later. The ifconfig command displays information about the current network status, including the IP address, or you can use hostname -I to display the IP addresses associated with the device. For connection with the Raspberry Pi you need to type in the following: $ sudo pi@<IP>","title":"Raspberry Pi configuration"},{"location":"Raspberry%20Pi%20configuration/#configuration-raspberry-pi","text":"","title":"Configuration Raspberry Pi"},{"location":"Raspberry%20Pi%20configuration/#ssh-connection","text":"","title":"SSH Connection"},{"location":"Raspberry%20Pi%20configuration/#configuration-using-command-line","text":"To open the configuration tool on a Raspberry Pi, enter the following command line in the command prompt: $ sudo raspi config Scroll up and down using tab-key and arrows, navigate SSH then YES , then OK then click Finish .","title":"Configuration using command line:"},{"location":"Raspberry%20Pi%20configuration/#configuration-using-desktop","text":"Go to menu Preferences , choosing Raspberry Pi configuration . Then the corresponding GUI opens with setting options, you should select SSH via interface options and release the corresponding option. Images were taken from www.raspberrypi.org","title":"Configuration using desktop:"},{"location":"Raspberry%20Pi%20configuration/#configuration-using-systemctl","text":"$ sudo systemctl enable ssh $ sudo systemctl start ssh IP-address of Rapsberry Pi You'll need to write down your Raspberry Pi's IP address to connect to it later. The ifconfig command displays information about the current network status, including the IP address, or you can use hostname -I to display the IP addresses associated with the device. For connection with the Raspberry Pi you need to type in the following: $ sudo pi@<IP>","title":"Configuration using systemctl:"},{"location":"Raspberry%20Pi/","text":"Raspberry Pi Setup step-by-step This document gives us a quick overview how to setup Raspberry Pi . For this you need the following tools such as Micro HDMI cable, USB keyboard & mouse, SD card (for RaspberryPi Zero up to 256 GB), LAN cable for the Ethernet connection. The tools mentioned are not a must, but an optimal set for the initial configuration of the RaspberryPi. Installation of RaspberryPi OS First of all, one has to install RaspberryPi Imager using the following link . Images were taken from www.raspberrypi.org The current version of the operating system should then be selected using the \"Choose button\" button. We see several possibilities, the optimal choice would be RaspberryPi OS (32 GB). Images were taken from www.raspberrypi.org Next you have to connect the SD card to the card reader and select it as a storage medium in the image program. Then you have to start with the actual flashing after pressing the \"Write\" button. Images were taken from www.raspberrypi.org This brings us to the initial setup of the Raspberry Pi.","title":"Raspberry Pi"},{"location":"Raspberry%20Pi/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"Raspberry%20Pi/#setup-step-by-step","text":"This document gives us a quick overview how to setup Raspberry Pi . For this you need the following tools such as Micro HDMI cable, USB keyboard & mouse, SD card (for RaspberryPi Zero up to 256 GB), LAN cable for the Ethernet connection. The tools mentioned are not a must, but an optimal set for the initial configuration of the RaspberryPi.","title":"Setup step-by-step"},{"location":"Raspberry%20Pi/#installation-of-raspberrypi-os","text":"First of all, one has to install RaspberryPi Imager using the following link . Images were taken from www.raspberrypi.org The current version of the operating system should then be selected using the \"Choose button\" button. We see several possibilities, the optimal choice would be RaspberryPi OS (32 GB). Images were taken from www.raspberrypi.org Next you have to connect the SD card to the card reader and select it as a storage medium in the image program. Then you have to start with the actual flashing after pressing the \"Write\" button. Images were taken from www.raspberrypi.org This brings us to the initial setup of the Raspberry Pi.","title":"Installation of RaspberryPi OS"},{"location":"hardware/","text":"Hardware ChalkBot Hardware","title":"Hardware"},{"location":"hardware/#hardware","text":"ChalkBot Hardware","title":"Hardware"},{"location":"hardware/test/","text":"Test","title":"Test"},{"location":"hardware/test/#test","text":"","title":"Test"},{"location":"software/","text":"Software Chalkbot Software Test Leon","title":"Software"},{"location":"software/#software","text":"Chalkbot Software","title":"Software"},{"location":"software/#test-leon","text":"","title":"Test Leon"}]}